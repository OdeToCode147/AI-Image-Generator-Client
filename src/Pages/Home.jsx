import React, { useEffect, useState } from "react";
import Card from "../Components/Card";
import FormField from "../Components/FormField";
import Loader from "../Components/Loader";

const RenderCards = ({ data, title }) => {
  if (data && data.length > 0) {
    return data.map((post) => <Card key={post._id} {...post} />);
  }

  return <h4 className="mt-5">{title}</h4>;
};

const Home = () => {
  const [loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState();
  const [searchText, setSearchText] = useState("");
  const [searchTimeout, setSearchTimeout] = useState(null);
  const [searchedResults, setSearchedResults] = useState(null);

  const fetchPosts = async () => {
    setLoading(true);

    try {
      const response = await fetch(
        "https://ai-image-generator-server-zrph.onrender.com/api/v1/post",
        {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        }
      );

      if (response.ok) {
        const result = await response.json();
        setAllPosts(result.data.reverse());
      }
    } catch (err) {
      alert(err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchPosts();
  }, []);

  console.log(allPosts);

  const handleSearchChange = (e) => {
    clearTimeout(searchTimeout);
    setSearchText(e.target.value);

    setSearchTimeout(
      setTimeout(() => {
        const searchResult = allPosts.filter(
          (item) =>
            item.name.toLowerCase().includes(searchText.toLowerCase()) ||
            item.prompt.toLowerCase().includes(searchText.toLowerCase())
        );
        setSearchedResults(searchResult);
      }, 500)
    );
  };

  return (
    <div>
      <div>
        <h1 className="font-extrabold">The Community Showcase</h1>
        <p className="mt-3">
          Browse through a collection of imaginative and visually stunning
          images generated by DALL-E AI
        </p>
      </div>
      <div className="mt-4">
        <FormField
          labelName="Search posts"
          type="text"
          name="text"
          placeholder="Search something..."
          value={searchText}
          handleChange={handleSearchChange}
        />
      </div>
      <div className="mt-4">
        {loading ? (
          <div className="d-flex justify-center items-center">
            <Loader />
          </div>
        ) : (
          <>
            {searchText && (
              <h4 className="font-medium mb-1">
                Showing Resuls for <span> </span>
                <span className="">{searchText}</span>:
              </h4>
            )}
            <div className="row ml-4">
              {searchText ? (
                <RenderCards
                  data={searchedResults}
                  title="No Search Results Found"
                />
              ) : (
                <RenderCards data={allPosts} title="No Posts Yet" />
              )}
            </div>
          </>
        )}
      </div>
    </div>
  );
};

export default Home;
